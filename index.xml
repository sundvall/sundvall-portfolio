<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HOME on Martin Sundvall</title><link>https://sundvall.github.io/sundvall-portfolio/</link><description>Recent content in HOME on Martin Sundvall</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Martin Sundvall</copyright><lastBuildDate>Tue, 21 Mar 2023 10:37:55 +0200</lastBuildDate><atom:link href="https://sundvall.github.io/sundvall-portfolio/index.xml" rel="self" type="application/rss+xml"/><item><title>Use the tools of angular</title><link>https://sundvall.github.io/sundvall-portfolio/post/how-angular-solves-the-problem/</link><pubDate>Tue, 21 Mar 2023 10:37:55 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/post/how-angular-solves-the-problem/</guid><description>With the nose deep down in the context of an frontend application source code, it is important to remember why the framework is there and how to support its usage. As an example, data and logic is separated and flows through inputs, outputs and services. It is possible to pass data around in other ways, but then the tool is unintentionally used.
frontend general problems state management &amp;ldquo;most problems arise from the difficulty to synch state with view&amp;rdquo; handled by separation of logic and presentation asynchronous updates user events network requests pending, success and error states html browserspecificalities guide the user with well designed UX level of accessability css the global cascade of style rules various screen widths javascript javascript has both &amp;ldquo;class&amp;rdquo; syntax and functions and may be developed in many ways javascript has many &amp;ldquo;magic&amp;rdquo; behaviours, like parseInt(0.</description></item><item><title>Checklist for a maintainable angular application</title><link>https://sundvall.github.io/sundvall-portfolio/post/best-practices-angular-development/</link><pubDate>Tue, 21 Mar 2023 09:37:55 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/post/best-practices-angular-development/</guid><description>As a developer in a new context, both in team and in code base, the task was to extend an existing feature. To accomplish this it was not unexpexted to spend some time on resarch and onboarding into the system of, in this case, 2000 files and 185 000 lines of code divided into 485 angular components.
There could be numerous of ways to do this, like in person handover, documentation, well written tests and code following good standards.</description></item><item><title>Tools and paradigms for development</title><link>https://sundvall.github.io/sundvall-portfolio/post/useful-patterns-and-tools-for-angular-development/</link><pubDate>Tue, 21 Mar 2023 09:37:55 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/post/useful-patterns-and-tools-for-angular-development/</guid><description>A collection of very useful patterns and paradigms of angular application, collected from experience, articles and lectures.
patterns and tools S in &amp;ldquo;SOLID&amp;rdquo; The principles of &amp;ldquo;SOLID&amp;rdquo; describes patterns to create reusable and testable code. The &amp;lsquo;S&amp;rsquo; is &amp;lsquo;single responsibility principle&amp;rsquo;:
a component should do one thing a method should do one thing a function should do one thing naming should follow the single task a description of the component, function or method should reflect this fact &amp;ldquo;O&amp;rdquo; in &amp;ldquo;SOLID&amp;rdquo; The &amp;ldquo;open-closed&amp;rdquo; principle.</description></item><item><title>Vattenfall electricity my pages</title><link>https://sundvall.github.io/sundvall-portfolio/portfolio/vattenfall-my-pages/</link><pubDate>Mon, 02 May 2022 19:47:09 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/portfolio/vattenfall-my-pages/</guid><description>At Vattenfall me and my crossfunctional team cream created components for customers and editors.
The components were created as webcomponents possible to use from cms (episerver), and integrated library components to provide consistency of appearance.
Storybook was used to document and develop library components in isolation.
Angular framework was used together with jest for testing, azure for api&amp;rsquo;s, Ngxs for state management and tailwind for styling.
Strict adherence to naming conventions was helpful to maintain the codebase.</description></item><item><title>Vattenfall electricity login flow</title><link>https://sundvall.github.io/sundvall-portfolio/portfolio/vattenfall-login/</link><pubDate>Sun, 02 May 2021 19:47:09 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/portfolio/vattenfall-login/</guid><description>As an internal project me and my team implemented the design and flow to login with bank-id.
I introduced the creation of a visual flowchart as one of the first tasks in the agile sprint. It was created from the given ux-design and included the navigation logic and network traffic. This became the gathering point to early discuss aspects of both ui and api-calls. It also simplifed communication outside the dev-team with stakeholders and testers.</description></item><item><title>Animated svg controlled by input slider</title><link>https://sundvall.github.io/sundvall-portfolio/post/animated-svg-controlled-by-input-slider/</link><pubDate>Fri, 03 May 2019 09:37:55 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/post/animated-svg-controlled-by-input-slider/</guid><description>&lt;p>Crossbrowser svg animation created in raw svg markup inside angular component
&lt;a href="https://sundvall.github.io/sundvall-portfolio/sundvall-portfolio/post/animated-svg-controlled-by-input-slider/" >&lt;/p>
&lt;p>&lt;figure>&lt;img src="https://sundvall.github.io/sundvall-portfolio/sundvall-portfolio/post/images/animated-svg-connected-to-slider-480.gif"
alt="Screenshot of animated svg controlled by custom styled input range form element."/>&lt;figcaption>
&lt;p>Screenshot of animated svg controlled by custom styled input range form element.&lt;/p>
&lt;/figcaption>
&lt;/figure>
&lt;/a>&lt;/p></description></item><item><title>Kronofogden my pages</title><link>https://sundvall.github.io/sundvall-portfolio/portfolio/kronofogden/</link><pubDate>Thu, 02 May 2019 19:47:09 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/portfolio/kronofogden/</guid><description>At Kronofogden me and my crossfunctional team cream created application flows for logged in users. I was leading the frontend development and focused on upgrades of the technical environment and improvements in developer experience, aside from implementing accessible forms. The environment was very restricted and provided many challenges to provide access to tooling that is in most circumstances are natural.
As an authority the requirements of accessability were very strict, and an external consultancy firm was engaged to evalutate the results.</description></item><item><title>Comeon casino payment solutions</title><link>https://sundvall.github.io/sundvall-portfolio/portfolio/comeon-casino/</link><pubDate>Tue, 02 May 2017 19:47:09 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/portfolio/comeon-casino/</guid><description>I created the first frontend solution for the mobile payment solution. This was created in pure vanilla javascript and built upon the pre-redux solution of state management called &amp;lsquo;flux&amp;rsquo;. The main idéa was to separate management of data from rendering, and was solved with several &amp;lsquo;stores&amp;rsquo;. The dom-templates were handled by javascript.
When more developers joined and redux with react became popular the first solution was transferred into this. During the rewrite the system was documented with flowcharts.</description></item><item><title>Adssets e-commerce solutions</title><link>https://sundvall.github.io/sundvall-portfolio/portfolio/adssets/</link><pubDate>Sat, 02 May 2015 19:47:09 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/portfolio/adssets/</guid><description>At adssets I developed both new products for advertising and the self-service system to add content to existing ones. Everything was done in pure javascript and css and reusability was improved by combinations of command line scripts and reusable functions.
The work included both legacy formats and new development for video and animated interactive content used for advertising. Many edge-cases occured when smartphones, native apps and browsers where combined. Most often the debugging was made with remote scripts.</description></item><item><title>Caperio self-service web for workflow sofware</title><link>https://sundvall.github.io/sundvall-portfolio/portfolio/caperio/</link><pubDate>Thu, 02 May 2013 19:47:09 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/portfolio/caperio/</guid><description>At Caperio me and my team developed a new self service portal. It was an R &amp;amp; D project to provide a friendly interface to workflow software. As part of this I added content to the nodejs api and implemented the design evolved in close collaboration with both interaction designer and backend programmers.
Experience:
fullstack development pioneer project evolving design</description></item></channel></rss>