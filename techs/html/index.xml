<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>html on Martin Sundvall</title><link>https://sundvall.github.io/sundvall-portfolio/techs/html/</link><description>Recent content in html on Martin Sundvall</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© Martin Sundvall</copyright><lastBuildDate>Mon, 02 May 2022 19:47:09 +0200</lastBuildDate><atom:link href="https://sundvall.github.io/sundvall-portfolio/techs/html/index.xml" rel="self" type="application/rss+xml"/><item><title>Vattenfall electricity my pages</title><link>https://sundvall.github.io/sundvall-portfolio/portfolio/vattenfall-my-pages/</link><pubDate>Mon, 02 May 2022 19:47:09 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/portfolio/vattenfall-my-pages/</guid><description>At Vattenfall me and my crossfunctional team cream created content and components for customers of electricity and content editors managing the site. The components were created as webcomponents possible to use from cms (episerver), and integrated library components to provide consistency of appearance.
Storybook was used to document and develop library components in isolation.
Angular framework was used together with jest for testing, azure for api&amp;rsquo;s, Ngxs for state management and tailwind for styling.</description></item><item><title>Vattenfall electricity login flow</title><link>https://sundvall.github.io/sundvall-portfolio/portfolio/vattenfall-login/</link><pubDate>Sun, 02 May 2021 19:47:09 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/portfolio/vattenfall-login/</guid><description>As an internal project me and my team implemented the design and flow to login with bank-id.
A technical flowchart was created from the given design and was used as a tool to early on discuss aspects of both ui and api-calls. This was used by the team during the entire project and proved to be very useful. Missing parts of the flow were discovered early on and logical improvements could be done before any coding was executed.</description></item><item><title>Kronofogden my pages</title><link>https://sundvall.github.io/sundvall-portfolio/portfolio/kronofogden/</link><pubDate>Thu, 02 May 2019 19:47:09 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/portfolio/kronofogden/</guid><description>At Kronofogden me and my crossfunctional team cream created application flows for logged in users. As an authority the requirements of accessability were very strict.
Storybook was used to document and develop library components in isolation.
Angular framework was used together with Karma for testing, azure for api&amp;rsquo;s, Ngrx for state management and scss together with bootstrap for styling.
As a team lead I facilitated upgrade of the angular framework and configured tools for development.</description></item><item><title>Comeon casino payment solutions</title><link>https://sundvall.github.io/sundvall-portfolio/portfolio/comeon-casino/</link><pubDate>Tue, 02 May 2017 19:47:09 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/portfolio/comeon-casino/</guid><description>I created the first frontend solution for the mobile payment solution. This was created in pure vanilla javascript and built upon the pre-redux solution of state management called &amp;lsquo;flux&amp;rsquo;. The main idéa was to separate management of data from rendering, and was solved with several &amp;lsquo;stores&amp;rsquo;. The dom-templates were handled by javascript.
When more developers joined and redux with react became popular. Thus the demand on communication grew and the application could be improved with conventional standards.</description></item><item><title>Adssets e-commerce solutions</title><link>https://sundvall.github.io/sundvall-portfolio/portfolio/adssets/</link><pubDate>Sat, 02 May 2015 19:47:09 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/portfolio/adssets/</guid><description>At adssets I developed both new products for advertising and the self-service system to add content to existing ones. Everything was done in pure javascript and css and reusability was improved by combinations of command line scripts and reusable functions.
The work included both legacy formats and new development for video and animated interactive content used for advertising. Many edge-cases occured when smartphones, native apps and browsers where combined. Most often the debugging was made with remote scripts.</description></item><item><title>Caperio self-service web for workflow sofware</title><link>https://sundvall.github.io/sundvall-portfolio/portfolio/caperio/</link><pubDate>Thu, 02 May 2013 19:47:09 +0200</pubDate><guid>https://sundvall.github.io/sundvall-portfolio/portfolio/caperio/</guid><description>At Caperio me and my team developed a new self service portal. It was an R &amp;amp; D project to provide an interface to workflow software. As part of this I added content to the nodejs api and implemented the design evolved in close collaboration with both interaction designer and backend programmers.
Challenges and technical aspects:
fullstack development pioneer project evolving design</description></item></channel></rss>